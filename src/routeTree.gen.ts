/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PlansRouteImport } from './routes/plans'
import { Route as LogsRouteImport } from './routes/logs'
import { Route as AddPlanRouteImport } from './routes/add-plan'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EditPlansPlanIdRouteImport } from './routes/edit-plans/$planId'

const PlansRoute = PlansRouteImport.update({
  id: '/plans',
  path: '/plans',
  getParentRoute: () => rootRouteImport,
} as any)
const LogsRoute = LogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRouteImport,
} as any)
const AddPlanRoute = AddPlanRouteImport.update({
  id: '/add-plan',
  path: '/add-plan',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EditPlansPlanIdRoute = EditPlansPlanIdRouteImport.update({
  id: '/edit-plans/$planId',
  path: '/edit-plans/$planId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add-plan': typeof AddPlanRoute
  '/logs': typeof LogsRoute
  '/plans': typeof PlansRoute
  '/edit-plans/$planId': typeof EditPlansPlanIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add-plan': typeof AddPlanRoute
  '/logs': typeof LogsRoute
  '/plans': typeof PlansRoute
  '/edit-plans/$planId': typeof EditPlansPlanIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/add-plan': typeof AddPlanRoute
  '/logs': typeof LogsRoute
  '/plans': typeof PlansRoute
  '/edit-plans/$planId': typeof EditPlansPlanIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/add-plan' | '/logs' | '/plans' | '/edit-plans/$planId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/add-plan' | '/logs' | '/plans' | '/edit-plans/$planId'
  id:
    | '__root__'
    | '/'
    | '/add-plan'
    | '/logs'
    | '/plans'
    | '/edit-plans/$planId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddPlanRoute: typeof AddPlanRoute
  LogsRoute: typeof LogsRoute
  PlansRoute: typeof PlansRoute
  EditPlansPlanIdRoute: typeof EditPlansPlanIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/plans': {
      id: '/plans'
      path: '/plans'
      fullPath: '/plans'
      preLoaderRoute: typeof PlansRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/add-plan': {
      id: '/add-plan'
      path: '/add-plan'
      fullPath: '/add-plan'
      preLoaderRoute: typeof AddPlanRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit-plans/$planId': {
      id: '/edit-plans/$planId'
      path: '/edit-plans/$planId'
      fullPath: '/edit-plans/$planId'
      preLoaderRoute: typeof EditPlansPlanIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddPlanRoute: AddPlanRoute,
  LogsRoute: LogsRoute,
  PlansRoute: PlansRoute,
  EditPlansPlanIdRoute: EditPlansPlanIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
